@page "/editor"
@using BlazorMonaco
@using BlazorMonaco.Editor
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

<h1>Online Code Editor</h1>

<style type="text/css">
    .monaco-editor-container { /* for all editor instances */
        height: 500px;
    }

    /* or */

    #my-editor-id { /* for a specific editor instance */
        height: 500px;
    }

    /* or */

    .my-editor-class { /* for a specific editor instance */
        height: 500px;
    }
</style>
<div>
    <StandaloneCodeEditor @ref="_editor" Id="my-editor-id" ConstructionOptions="EditorConstructionOptions" />
    <button class="btn btn-primary" @onclick="ExecuteCode">Run Code</button>
    <div><p>@_executionResult</p></div>
</div>

@code {
    private StandaloneCodeEditor _editor;
    private HubConnection _hubConnection;
    private string _executionResult;
    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "csharp",
                GlyphMargin = true,
                Value = "using System;\n" +
                            "public class Program\n" +
                            "{\n" +
                            "    public static void Main()\n" +
                            "    {\n" +
                            "        Console.WriteLine(\"Hello, World!\");\n" +
                            "    }\n" +
                            "}\n"
            };
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/codeHub"))
            .Build();

        _hubConnection.On<string>("ReceiveOutput", (result) =>
        {
            _executionResult = result;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private async Task ExecuteCode()
    {
        var code = await _editor.GetValue();
        await _hubConnection.SendAsync("RunCode", code);
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}

